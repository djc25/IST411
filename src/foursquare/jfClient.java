/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package foursquare;

import java.awt.CardLayout;
import java.awt.Container;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author JSS5783
 
 (Client)
 Client program. Player logs in (jpLogIn), then waits for match-making (jpLobby), plays a match (jpMatch), and views their current rank in the scoreboard (jpScoreboard).
 Player returns to jpLobby after being disconnected on during a match, or after a match is fully concluded (win, lose, or draw, all go to the scoreboard).
 Player returns to jpLogIn on disconnecting, voluntarily or otherwise.
 
 ----------[CHANGELOG]----------
 * 2018/04/18 -     Added comments.
 *                  formWindowClosing now closes without confirmation dialog if on the login screen for a smoother experience. -JSS5783
 * 
 * 2018/04/16 -     Adjusted background color.  -JSS5783
 * 
 * 2018/04/15 -     Continued working on formWindowClosing method. -JSS5783
 * 
 * 2018/04/11 -     Added jScoreboard1. -JSS5783
 * 
 * 2018/04/10 -     GUI built in GUI builder now, with custom components manually added since the drag-and-drop into the GUI builder doesn't work.
 *                  Renamed variables to use clearer names:
 *                      jfClientLobby -> jfClient
 *                      jpli -> jpLogin1
 *                      jpl -> jpLobby1
 *                      jpm -> jpMatch1
 *                  Added comments. -JSS5783
 * 
 * 2018/03/25 -     Created. -JSS5783
 */
public class jfClient extends javax.swing.JFrame {
    
    //declaration
    private jpLogIn jpLogin1;
    private jpLobby jpLobby1;
    private jpMatch jpMatch1;
    private jpScoreboard jpScoreboard1;
    private static CardLayout cl;
    private static Container cClient;
    private static int intCurrentScreen = 0;    //0 = Login
                                                //1 = Lobby
                                                //2 = Match
                                                //3 = Scoreboard

    /**
     * Creates new form ClientLobby
     */
    public jfClient()
    {
        initComponents();
        
        //initialization
        jpLogin1 = new jpLogIn();
        jpMatch1  = new jpMatch();
        jpLobby1  = new jpLobby();
        jpScoreboard1 = new jpScoreboard();
        cl  = new CardLayout();
        cClient = new Container();
        
        //set layout to CardLayout
        cClient = this.getContentPane();
        cClient.setLayout(cl);
        
        //registration
        this.add(jpLogin1);
        this.add(jpLobby1);
        this.add(jpMatch1);
        this.add(jpScoreboard1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Project 4Square (CLIENT)");
        setBackground(PVar.BACKGROUND_COLOR);
        setMinimumSize(new java.awt.Dimension(960, 540));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 960, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Intercepts when the user closes the application (e.g., clicking on the "X" in the upper-right - or upper-left, if on iOS - corner of the window).
     * Behavior varies depending on current screen:
     *      Login: Asks if the user wants to quit, the same as the Exit button.
     *      Lobby: Warns the user that they will be disconnected from the server. Otherwise is the same as Login.
     *      Match: Warns the user that they will be disconnected from the server and that if they want to play again, they will need to log in again (this is to prevent selective win-farming). Otherwise is the same as Login.
     *      Scoreboard: Same as Lobby.
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
//        Object[] options = {"Yes", "No"};
//        UIManager.put("Button.defaultButtonFollowsFocus", Boolean.TRUE);
//
//        int intResult = JOptionPane.showOptionDialog(this, "Are you sure you want to exit?", "Exit Application", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[1]);
        int intResult = JOptionPane.NO_OPTION;  //default is "no"
        
        switch (intCurrentScreen)
        {
            case 0:     //Login screen
//                intResult = JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", "Exit Application", JOptionPane.YES_NO_OPTION);
                //auto-confirm, as there's no user data to lose
                intResult = JOptionPane.YES_OPTION;
                break;
            case 1:     //Lobby screen
                intResult = JOptionPane.showConfirmDialog(this, "Are you sure you want to disconnect and exit?\nYour session will be closed and you will no longer be able to update that session's score.", "Exit Application", JOptionPane.YES_NO_OPTION);
                
                break;
            case 2:     //Match screen
                intResult = JOptionPane.showConfirmDialog(this, "Are you sure you want to forfeit and exit?\nYour session will be closed and you will no longer be able to update that session's score.", "Exit Application", JOptionPane.YES_NO_OPTION);
                
                break;
            case 3:     //Scoreboard screen
                intResult = JOptionPane.showConfirmDialog(this, "Are you sure you want to disconnect and exit?\nYour session will be closed and you will no longer be able to update that session's score.", "Exit Application", JOptionPane.YES_NO_OPTION);
                
                break;
            default:
                if (PVar.DEBUG_MODE == true)
                {
                    System.out.println("[DEBUG] Error: Unhandled screen. Please report to the repository on Github.");
                }
                
        }
        
        if (intResult == JOptionPane.YES_OPTION)
        {
            this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        else
        {
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        }
        
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jfClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jfClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jfClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jfClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jfClient().setVisible(true);
            }
        });
    }
    
    
    /**
     * Changes to the next panel. Tracks which card is active.
     * Panel order: Login -> lobby -> match -> scoreboard -> login.
     * NOTE: This lists card order, not game order.
     */
    public static void nextCard()
    {
        cl.next(cClient);
        
        if (intCurrentScreen == 3)  //overflow from end of "card deck" to beginning
        {
            intCurrentScreen = 0;
        }
        else
        {
            intCurrentScreen++;
        }
    }   //END nextCard()
    
    
    
    /**
     * Changes to the previous panel. Tracks which card is active.
     * Panel order: Scoreboard -> match -> lobby -> login -> match.
     * NOTE: This lists card order, not game order.
     */
    public static void previousCard()
    {
        cl.previous(cClient);
        
        if (intCurrentScreen == 0)  //overflow from beginning of "card deck" to end
        {
            intCurrentScreen = 3;
        }
        else
        {
            intCurrentScreen--;
        }
    }   //END previousCard()

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
